AWSTemplateFormatVersion: "2010-09-09"
Description: "kubeadm"

# Parameters:
#   KeyName:
#     ConstraintDescription: "Must be the name of an existing EC2 KeyPair."
#     Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance(s)"
#     Type: "AWS::EC2::KeyPair::KeyName"

Resources:

  #################
  # EC2 Resources #
  #################
  ControlPlane:
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: "ami-06817f01dcc7f30be" # Latest Ubuntu 18.04 in us-east-2; https://cloud-images.ubuntu.com/locator/ec2/
      InstanceType: t3a.small
      # KeyName: !Ref KeyName
      # SecurityGroupIds:
      #   - !ImportValue 
      # SubnetId: !ImportValue vpc-PublicSubnetID
      IamInstanceProfile: !Ref KubeadmInstanceProfile
      Tags:
        - Key:   "Name"
          Value: "kubeadm-control-plane"
      UserData:
        Fn::Base64:
          !Sub |
          #!/usr/bin/env bash
          cd /root || exit 1
          apt-get update && apt-get install -y awscli
          export AWS_DEFAULT_REGION=${AWS::Region}
          export POD_NETWORK_CIDR=$(aws ec2 describe-vpcs --filters 'Name=isDefault,Values=true' --query 'Vpcs[*].CidrBlock' --output text)
          until aws s3 cp --recursive s3://kubeadm-${AWS::AccountId}/scripts/ ./scripts; do
            printf "Bucket kubeadm-${AWS::AccountId} has no scripts; waiting\n"
            sleep 5
          done
          bash ./scripts/init-core.sh
          bash ./scripts/init-control-plane.sh
          # Regenerate token, grab CA cert hash, and push to S3 for Nodes to use
          kubeadm token create > ./token
          aws s3 cp ./token s3://kubeadm-${AWS::AccountId}/token
          openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
            | openssl rsa -pubin -outform der 2>/dev/null \
            | openssl dgst -sha256 -hex \
            | sed 's/^.* //' \
          > ./hash
          aws s3 cp ./hash s3://kubeadm-${AWS::AccountId}/hash


  Node:
    Type: "AWS::EC2::Instance"
    DependsOn: ControlPlane
    Properties: 
      ImageId: "ami-06817f01dcc7f30be" # Latest Ubuntu 18.04 in us-east-2; https://cloud-images.ubuntu.com/locator/ec2/
      InstanceType: t3a.small
      # KeyName: !Ref KeyName
      # SecurityGroupIds:
      #   - !ImportValue 
      # SubnetId: !ImportValue vpc-PublicSubnetID
      IamInstanceProfile: !Ref KubeadmInstanceProfile
      Tags:
        - Key:   "Name"
          Value: "kubeadm-node"
      UserData:
        Fn::Base64:
          !Sub |
            #!/usr/bin/env bash
            cd /root || exit 1
            apt-get update && apt-get install -y awscli
            export AWS_DEFAULT_REGION=${AWS::Region}
            until aws s3 cp --recursive s3://kubeadm-${AWS::AccountId}/scripts/ ./scripts; do
              printf "Bucket kubeadm-${AWS::AccountId} has no scripts; waiting\n"
              sleep 5
            done
            bash ./scripts/init-core.sh
            bash ./scripts/init-node-aws.sh


  #######
  # IAM #
  #######
  KubeadmRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
      Policies:
        - PolicyName: "KubeadmPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:Head*"
                  - "s3:List*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub
                  - "${BucketArn}/*"
                  - { BucketArn: !GetAtt Bucket.Arn }
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: !Sub
                  - "${LogGroupArn}"
                  - { LogGroupArn: !GetAtt LogGroup.Arn }
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: !Sub
                  - "${LogGroupArn}/*"
                  - { LogGroupArn: !GetAtt LogGroup.Arn }
  
  KubeadmInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref KubeadmRole


  #########################
  # S3 Bucket for helpers #
  #########################
  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub "kubeadm-${AWS::AccountId}"
      # VersioningConfiguration:
      #   Status: Enabled
      # LifecycleConfiguration:
      #   Rules:
      #     - Status: Enabled
      #       Id: Delete stale data
      #       NoncurrentVersionExpirationInDays: 3
      #       AbortIncompleteMultipartUpload:
      #         DaysAfterInitiation: 1


  ###########
  # Logging #
  ###########
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: "/aws/ec2/kubeadm"
      RetentionInDays: 7
  LogStreamControlPlane:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroup
      LogStreamName: "control-plane"
  LogStreamNodes:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroup
      LogStreamName: "nodes"
